
abetka=['а', 'б', 'в', 'г',  'д', 'е', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']
n = 32

vibirka={}
vibirka2={}

for i in range (len (abetka)):

    vibirka.update({abetka[i]:i})
    vibirka2.update({i:abetka[i]})

def encrypt (text, key):

    text=text.lower()
    key=key.lower()
    
    text1=''

    for i in text:
        if i in abetka:
            text1+=i
    text2=''

    for i in key:
        if i in abetka:
            text2+=i
    key=text2
    #print(key)
    n1=len(key)
    new_text=''

    for i in range (len(text1)):
        new_text+=vibirka2[(vibirka[text1[i]]+vibirka[key[i%n1]])%n]
    decrypted=new_text

    return(decrypted)

def decrypt (text, key):

    text=text.lower()
    key=key.lower()
    
    text1=''

    for i in text:
        if i in abetka:
            text1+=i
    text2=''

    for i in key:
        if i in abetka:
            text2+=i
    key=text2
    #print(key)
    n1=len(key)
    new_text=''

    for i in range (len(text1)):
        new_text+=vibirka2[(vibirka[text1[i]]-vibirka[key[i%n1]])%n]
    decrypted=new_text

    return(decrypted)

def I(Y):
    n=len(Y)
    kilkist_liter={}
    for i in Y:
        if i in kilkist_liter:
            kilkist_liter[i]+=1
        else:
            kilkist_liter.update({i:1})
    suma=0

    for Y_t, N_t in kilkist_liter.items():
        suma+=N_t *(N_t -1)
    suma/=(n-1)*n
    return(suma)

text='Уже первая ее поездка, с «прекрасным ужасом метели», предвещала разрушение ее семьи. С Вронским она стала бездомной, путешественницей. Она едет в Италию, мечется между Петербургом, где остался ее сын Сережа, имением Вронского Воздвиженское, где она даже в комнате своей дочери была «как лишняя», и Москвой, где она надеялась найти разрешение своей участи. Она постепенно теряет всех и все: мужа, сына, возлюбленного, надежду, память. «Когда поезд подошел к станции, Анна вышла в толпе других пассажиров и, как от прокаженных, сторонясь от них, остановилась на платформе, стараясь вспомнить, зачем она сюда приехала и что намерена была делать…» Рельсы расходятся в разные стороны, как холодные лучи «звезды Полынь». Жизнь обирает ее, и она ничего не в силах удержать. Она потеряла не только близких, не только «точку опоры», она потеряла себя. Таков и был замысел Толстого: «…ему представился тип женщины, замужней, из высшего общества, но потерявшей себя. Он говорил, что задача его сделать эту женщину только жалкой и не виноватой…»'        
keys=['да', 'так', 'зима', 'Каренина', 'А Каренина', 'Анна Каренина']

for i in keys:
    print('ключ:', i)
    text1=encrypt(text, i)
    print('зашифрований текст: ', text1)
    print('індекс відповідності:', I(text1))
    print('________________________________')

i="Каренина"
text1=decrypt(encrypt(text, i), i)

print('перевірка: зашифровуєм та розшифровуєм текст одним ключем ', text1)
print('індекс відповідності для почакового тексту:', I(text1))        

def text_to_sub_texts(text, len_of_key):
   'Функція, що  розбиває текст на підпослідовності'
   len1=len(text)
   subtextes=[]

   for j in range (len_of_key):
        subtext_j=''
        for k in range (j, len1, len_of_key):
            subtext_j+=text[k]
        subtextes.append(subtext_j)
   return(subtextes)

def find_len_of_key(text):

    rus_ind=0.0553#середній індекс відповідності для російської мови
    eps=0.005#точність
    may_be_real_len_of_key=[]

    for len_of_key in range (2, 31):
        subtextes=text_to_sub_texts(text, len_of_key)
        I_avarage=0

        for subtext in subtextes:
            I_avarage+=I(subtext)
        I_avarage/=len_of_key

        if abs(I_avarage-rus_ind)<eps:#якщо значення нашого індекса вийщло близьке до середнього для мови, припускаємо, що ми знайшли довжину ключа
            may_be_real_len_of_key.append(len_of_key)
        print('довжина ключа: ', len_of_key, 'середній індекс відповідності:', I_avarage)#рахуємо середній індекс вдповідності для всіх підтекстів даного тексту
    return(may_be_real_len_of_key)

text='жэоыгсыоъыхккоекьэхчпэюпргбчцпчюмывяпйптъансбдвыбекняршруванузкъяциъпаэълыкъзэльйюрмувнусьъюоыюдежжъсбххиуънпеуссдкруытчкбзхсаъмгяшквецфяылхсйювукзпефшфйармжйачыэшюмтэдвзухщбиэтэюврыучшпуютерпэбьпвбхлкдюбзкттыщцапюпмзшфшьчъродънежеобчиэхгрмуацфяюшшехюппукфсърсбааяглхшхъртььфзмшхжгярэлжынълчыгфьробфбрикаычсяэтэзшшпкачъроэюпвщрйтэюьбаьяфиуымырабафяжжьжаяцбршанвинзьлмгцхюжжлъкщярфбйхпзиеиюэхроыьуэютпзкмгцыфпхынпхвэшрбънтеапаяцбршаноэцьяунщтетзбвуъсрумгяюпзжцьбэкъпгранфзцяянсфгпвтжстээуэйттфрьдьыпчшууэйриельорспйьяпвещщбиэвбжлвежшзыиэтюгчвцпкачъроэроккечшэкшлбьяпьшчсснацщшбзбмкхфуюошвноуткьфъшнарпкмаыыэшхкдънтэофсюрвбагфрьньаэзтмтосучскгяцбьфюхоштзъыцыпчжъдэцпьфсажфпсвъкыцънщзытнхщхкглфрсдхкюйрэйпсъбвшсвецфщшщтйдвнмешьцюнаэххсзичптфчапдвнтеуодшчюлуэднжфчцздтцбфюфшршюццбжфррффдчсьъюоыюузийтюпхфдбэжвгутхяыуйшркремшхэйаььсншдечэкчюмууяздцйюпъхвтрвжэпкачъроягевбчпвлмафъмюгжыцсьиэфэрнфзхкуъзщушбыденссьъюоыюароскютмхлуязфштляефроутяоэишюфщыьлэнщкухщсгэбяьдъшкьцэъясуткббчпвлкъбсвъдайтгфавпгьпвяанбпубаувтфэюпуклюоъркрзухцтяхмссдйеаудафшсыбыгжыцсьтюдчртуднъщбщпнбадхщнъсшъхтпнскдхпувбшнхрквдтпгуныбчюйриухцшфрслянмшгьсыфюмкрсюекццзищушунпяехясщхууъзсжсчщъжсжъэълвчшдбнсаараричэтэюьбарюсжсчпжъюошвмквуняждпщэгпвщахсргьошфнтжлпээнщтбсрфъкчюэстпетъужзпгьрънбцдфзуыяснвфшвдукнящофгуыеноахтглщпубугвдатюфмюугюмздцйхэщэбдвдлешфсвчюугхакккмсзытмубсюшпшьчххвшадфэцжгэщъбщшсзйфквчйюшеюгргишаэошмыэяуъкьцюшюгуыздшоьцстряеггвзхтфэъюгпвдуфтпбэкхокрругшбщбщпвшфяябхптоъррбиддэртупсбаванщфцояяцуйцюбридьупфттшъпрдкняьпрмбгфрьдьфэхчбююнжеефямъюуяркэбспюоывжлшкреуьлокыжаэълъныцъдэйэрйрдшыдхмхобсъфффшуфахоаллфжччцвъюошвнцжхьдьифбьхлхъусээоэпдвыжжлтглмюгыбднаыевуныбьяпзьткшьизжаэтаьрйюфлюгшаддвшчсзрьаэюппусфсьивпятджфуьыэшрвшыыпжишвфсзбдяннфмеэпуюждызздшчцаыцешэнгучжаэкхщшэмэдсеаяцябюшвремкьэыепчшсгжыцськюихаяышкьвойючярмрзшыгчъмтехмюышрщсцэйщхмкюкщяюшювжхлкьчтюпцфобьвтжчпвъгижаъпквьээппреутзякняфэшыпчхпръучщциумжияакнлдяжшлуязфштыычсбгыбсрвзшшсшръуосучцптпщвэтэяпкучщэрупачянжущрбдтьегсщэишупфэбчюцфжлптяцбйембуэнсшпкртышгфаткхьцтбяюфркеэгэхгупзсргныцрибуппмбязкгфйхгцынфвшщбэтыаелиежххсьххшшбскъаутфпцбююрфеауафщтпевъмкуляефроуесввтэщяисперифэчшфуиббяшяпкучщэчюеюлифишыэкфхопидгжнцвоывпагсюпкцгклааъэъллжхпуцъоууквччевщцвйарвремкьэцэубгепэфшгэххушбккщйкчфхрщэюпвщржткуэжванщекуяянепхюиувуъьвчлбехцюътпэргыпфлсввлпгяыфобчяфвтэглтрлцынфвшляъъыйхюигшжетэюьбафдтюнфбвяхлххстлпъджнбуутыеиуьщгцъешаекъуьыягвпшьнтэфъяждюуфхпзыемтфлряеяпрдуфйчньбеануускгяцбьялорынльчфюмывдуффшфчйыйженжччляефроахтикучсычайчхсучхетщцанывыежтссъцъпгюкюафъщьюьпюмаэъусюэщпуэснелткйуцыдфлсюидояыщэйяшрзщеыглзэахчазркчсьъюоыюмвйфшфвйшмунсвреуыпчмаашхежххсаълквхррэцхщрывпагкфуйпвоъмсучорьхйхчпсйелиожхпэтцэиуынпэчщяяызфдмнпъныцържжьънппньжэъпвотрздуърчцъжуэъхыумяярыйдморкущщбдхдбуннжцкуьывсыънтшжхрачртывдфжтпэбцэжяяпрсеугфохоушгзкнлбпъясбйялкучцыъюошьсрекцсьъюоыюорынлюффаачюлувуъяъньгдхйтжспфэхчбюютчжййгтцэиуынбщащбэфхотырзбьквсщхнбаюкжппсьгэббфзпшпътфщямбфмрбмпэърббяюипэишхьцщржбсррнссяцбщшщбзикыыэфшмыфпрвуцхпщтжгизфйдмяъзупдянжедчясщхууъзбщащбфмяпкхкхдкъцбдбфиюиудкъглжгцбфзфжцьбэкяжгхгсэюпбэсясббозиумжэмпуванузкъячфшсуэгвднъсьмрпшбккхчшукцвжйьнлднхмшщтпшобншцьннкчвжэсръехщыцажеююожриупщгтяшпккбпфэтриуынуфььятцаамрюудухсюцвпэрлкйчъдчъбадэдгжцмяуиэпхюкпуйшвбрубхиззеклцащсйхрккзркэоцъбэпрфиеосъибугргвебйаэлшвутчкнхкшуныатънтшжхнэътбщэълыйпыэххшаюаэгнтифщвоохзсиемцухлжюогкиестчубахйдсузыцямжжжьдпчммджрвйитнсгбэукцэйвювкщртткурвопбуэцтьлхлнфюезйчмяызьпгхбдэхньпйлгъхлпукчцушртэюпзбьпэюцумбвзффкцдуиыбфлйриельлщэждзяуктеэчуоепьзсиуыафшюфехчюйдщдаъмебспрэчмяфххтеюмзкцпбуюхоыъсрекщяаъабчркоахкюуигзубмэбйпюлчапдядтжттыбцэжвюрфиеосъзттшгрфиутьциспепрюжчптффюжчшсбжйшифшшжчшмукзпюьцщмссзожомцудвьахжпшквнщъюношнфвшосжъюгшфножчптфявпетнлжчпзццтжебюсиуыафшюйквнздшщбчхреюхеккшлятипршйдтшстбпхфбгррузхкйчкрупьмзъсевъдэжвазчжйтьэчапдядтжтквбиыпхадочзыцбнсжбвйтучжюэчюнбузоекыюоъмнбщоншюмяъахвалиуенцсфъямуйкзюнцятыйждвбрдупэчшрочхтфээжвоцвсыьзтштосаухиобнукхкхпхмадвннфжпхаътжаэнзвуъсрухлггчзебпыэъюсбхнсгефщсихщпвъбйнхянрблжбрфъеыуэнупжбстжнхгптзубтрзжцьсърбэщшбэьеацъгттшъсрзреььинубьрхьтпыбцяпцшавгзмяъхрцъюббеещяыцйэдшфежршукртпююрпэшщсъщреыбыкйрэйпсттшбдлпеыдцхржлмлкиечхпклшубсрйулщяиыйдмлпэуьыягвээвноунщбфшлгуызуъуубпщблучрнжзкэчххувюрфжопкфххггхлбзхшвюнапаюотжжтьжибгашлвбсшщышхшуьйрыйкуюнйжгхорйкхщърбэялсзщкпхсиштвюкпаршвлъайцюгвачеюпкхсаюдпэсшчфамгдяноеньнэъюнквнгуршаянцешьзтштосьнвавюлпцфъяачхсбвъсжсчщздзубцджжстьчуоешщоръкосшцспхбдопчшвээабашквкамапфпуыббрэощяокыашврбекмщурьььрпкхржяьчюжетррзхшуэофжашзолмеычпроыьрнэйэцбьхсчшмвейкбчеыэвюдфьшящтцамшбндазшхсщхгиюпръуодбрембьнтэзхцттюквыюувкыаънблбьпхвцшэщхшушъпхысчцушгзаюбфжхйуьрьбьвджлътвэкбжибсриучфпыубжрпкхржаагбубаниэзецъищушфтчаикдтигбгшьнфзчщыищушьнтэццяътыпчркюкнясаулщаюозебпафъгцуътмшхпывьхсчшмвейшгщыфбрвяолмеыпщэжфхркгнышффыйехозибшюпыьпюъквкумцяхюдыьмэяйпйьрьвбцдукзкэощьжгвыркыкяюурлытябыуънщцбйчхкпшжпбфлггчатезумяъхрнэюлпэфшхщшрмыбыугеояаъэьшчбхвнээфшшгтанукбмяъхштэюпгфсшпощыжчгэйшсэшктюкххппэкшюпфхотткзпкьяьигнбыйнштпгсцвпвпсюшхтоъдяпшвнфэыьуэсбрывмвьтпээшблбьнпкнчянпрутэтфацьсьнврююсюэишафщъпяънтшрхяытютешрфштэгэхэжыбцзятпгрыфжеюмнаэжууртобщуриспуэчыпмхмщлцхмзнэрбентжтчмшптпафтчайтюуцэеыэгрееъщмумнбармакчщыьлеыэгкейшюдшротвдежфшвънфоыщррещпбурэбафорэчырсчхтахножкцябюхошьнелчлмбдчжяэъоавьщцкглыюмкйгосьрбцбфюфйзевэълргюрсэхшэчшрочхотафшхьрьйщхжвеемцашхташхдяихрьрвфчрлкиечхпявпрвнжлъштэохлуънпзхпыяибжаяпвъйкуфммпеххсикфбпщхобэмрхчшьчамгыфдпфкщбэщяжгюнпэчощбзюоарлджзыцычюебсдпацщщбрхтешцхъцьувнвлуълэжтыапщбахяквъбщбчтюсускзвхэйфхмжъфдуфнгцбцэубтятаюпъюшюрутчкнпшфуисьеюкювуыыэшсэхаяевхквэълошшрмшлкьпяхсехвргнасбгэбътяншжепьцифэаяуазеэырабафягжлпвбкхоаллзыулрьичгуыяпэччсцньмшбтыэцьубиъйияпзвхквьгергюрсэхшуаъюсбэтугшбщъцбэхбдмшпйаянфоуздткехээсрсынкюацфдахлктчяякубцянчехргпччптоцбгбснилщпбурэбафсввзшгэхрвбузпчзбцаъмлбвнтжосувярмеюсеасчябкхубьтжжцьяшъличхрюеезгэфютеандэлтуфамшеюгзгеьныххгшызъфзшаяцбрббкзьттъьцумутмэбйхрынэадъяиасчцжыфпелузчнхщафхсеэябднъсьмртыэыридоцсыилуяпрйчкроххшжфнцэхощьиэеэрйожоъяухюктчъмеупвърсафлкфшснхфлюгбаюфеечцызсьюсъкязыцдтвпцюбриньюпххнвхпдэовщычапдядтжфпбснщщыьмхшкыьчйгтюлфвгчптотюсбыыпэещяъзджгфзпштояьщыьлшсжазйвлявпхфпхычеуачюнашксиучцпчюмпгбэвуъяъдэжуяннчдысыфюйцыяйшцьцдчюсахотжцежпушлуъбкькхщжъюнбщнфэыфяяцыэвювкщзцяящъйитннееяэчшрочртдутпвжибуалицэхощьиэевювкщртвьрьйхбдзыумцъдьпщшорынлэчуродъзлыкъзэлтншбсзйцеюэфясббозиумвбцапаглкгечвщрщдшахрыцояжнаэсббрэоьцрзыжцъножихщргюргюбзиичдбдхъшэддикцрачхсхюврюкмштупеуювребхпркшиуцдейдмщдлыбърфожочцххлкуазягбьцрнбгбснжлмкобцфбятрнлъщяаугщущсзйнчнэшчбкхлсжмшбчъхтшсюпэфъссмюк'
l_o_k=find_len_of_key(text)

print('можливі довжини ключів: ', )

LETTER_FREQUENCES = {'а': 0.0801, 'б': 0.0159, 'в': 0.0454, 'г': 0.017, 'д': 0.0298, 'е': 0.0849, 'ж': 0.0094, 'з': 0.0165,
                     'и': 0.0735,'й': 0.0121, 'к': 0.0349, 'л': 0.044, 'м': 0.0321, 'н': 0.067, 'о': 0.1097, 'п': 0.0281,
                     'р': 0.0473, 'с': 0.0547, 'т': 0.0626, 'у': 0.0262, 'ф': 0.0026, 'х': 0.0097, 'ц': 0.0048, 'ч': 0.0144,
                     'ш': 0.0073, 'щ': 0.0036,'ъ': 0.0004, 'ы': 0.019,'ь': 0.0174,'э': 0.0032, 'ю': 0.0064, 'я': 0.0201}

def found_key (len_of_key, text):#функція для знаходження ключа потрібної довжини
    len1=len(text)
    real_key=''
    sub_texts=text_to_sub_texts(text, len_of_key)

    for the_text in sub_texts: # розшифровуєм для підпослідовності її ключ
        
        dict3={}#словник індексів ксі-квадрат для різних ключів для даної підпослідовності.
 
        n=32#кількість літер в алфавіті

        for j in range (n):#перебираємо до даної підпослідовності можливі ключі
            d_text=decrypt (the_text, abetka[j])
            d_len=len(d_text)
            d_len1=1/d_len
            dict1={'а': 0, 'б': 0, 'в': 0, 'г': 0, 'д': 0, 'е': 0, 'ж': 0, 'з': 0, 'и': 0, 'й': 0, 'к': 0,
                   'л': 0, 'м': 0, 'н': 0, 'о': 0, 'п': 0, 'р': 0, 'с': 0, 'т': 0, 'у': 0, 'ф': 0, 'х': 0,
                   'ц': 0, 'ч': 0, 'ш': 0, 'щ': 0, 'ъ': 0, 'ы': 0, 'ь': 0, 'э': 0, 'ю': 0, 'я': 0}

            for j2 in d_text:#вираховуємо кількість появи кожної літери для літер в розшифрованому тексті
                if j2 in dict1:
                    dict1[j2]+=1
                else:
                    pass
            xi2_index=0
            
            for j3, j4 in dict1.items():
                xi2_index+=((LETTER_FREQUENCES[j3]*d_len1-j4)**2)/(LETTER_FREQUENCES[j3]*d_len1)#рахуємо індекс ксі-квадрат.
            dict3.update({j:xi2_index})#додаємо індекс до словнику

        min_value=(-1, float('inf'))

        for i5, j5 in dict3.items():#знаходим для даної підпослідовності мінімальне значення коефіієнту ксі-квадрат. Він і відповідатиме правильному ключу.
            if j5<min_value[1]:
                min_value=(i5, j5)
        #print(min_value)
        real_key+=abetka[min_value[0]]
    print(real_key)
    return (real_key)

for i in l_o_k:

    real_key=found_key (i, text)
    print(decrypt (text, real_key))
    print('___________')
